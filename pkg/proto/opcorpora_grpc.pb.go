// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpCorporaServiceClient is the client API for OpCorporaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpCorporaServiceClient interface {
	Mode(ctx context.Context, in *ModeRequest, opts ...grpc.CallOption) (*ModeResponse, error)
	FindWord(ctx context.Context, in *FindWordRequest, opts ...grpc.CallOption) (*FindWordResponse, error)
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
	CheckFind(ctx context.Context, in *CheckFindRequest, opts ...grpc.CallOption) (*CheckFindResponse, error)
	Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error)
}

type opCorporaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpCorporaServiceClient(cc grpc.ClientConnInterface) OpCorporaServiceClient {
	return &opCorporaServiceClient{cc}
}

func (c *opCorporaServiceClient) Mode(ctx context.Context, in *ModeRequest, opts ...grpc.CallOption) (*ModeResponse, error) {
	out := new(ModeResponse)
	err := c.cc.Invoke(ctx, "/opcorpora_service.OpCorporaService/Mode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opCorporaServiceClient) FindWord(ctx context.Context, in *FindWordRequest, opts ...grpc.CallOption) (*FindWordResponse, error) {
	out := new(FindWordResponse)
	err := c.cc.Invoke(ctx, "/opcorpora_service.OpCorporaService/FindWord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opCorporaServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, "/opcorpora_service.OpCorporaService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opCorporaServiceClient) CheckFind(ctx context.Context, in *CheckFindRequest, opts ...grpc.CallOption) (*CheckFindResponse, error) {
	out := new(CheckFindResponse)
	err := c.cc.Invoke(ctx, "/opcorpora_service.OpCorporaService/CheckFind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opCorporaServiceClient) Stat(ctx context.Context, in *StatRequest, opts ...grpc.CallOption) (*StatResponse, error) {
	out := new(StatResponse)
	err := c.cc.Invoke(ctx, "/opcorpora_service.OpCorporaService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpCorporaServiceServer is the server API for OpCorporaService service.
// All implementations must embed UnimplementedOpCorporaServiceServer
// for forward compatibility
type OpCorporaServiceServer interface {
	Mode(context.Context, *ModeRequest) (*ModeResponse, error)
	FindWord(context.Context, *FindWordRequest) (*FindWordResponse, error)
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	CheckFind(context.Context, *CheckFindRequest) (*CheckFindResponse, error)
	Stat(context.Context, *StatRequest) (*StatResponse, error)
	mustEmbedUnimplementedOpCorporaServiceServer()
}

// UnimplementedOpCorporaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOpCorporaServiceServer struct {
}

func (UnimplementedOpCorporaServiceServer) Mode(context.Context, *ModeRequest) (*ModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mode not implemented")
}
func (UnimplementedOpCorporaServiceServer) FindWord(context.Context, *FindWordRequest) (*FindWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWord not implemented")
}
func (UnimplementedOpCorporaServiceServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedOpCorporaServiceServer) CheckFind(context.Context, *CheckFindRequest) (*CheckFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFind not implemented")
}
func (UnimplementedOpCorporaServiceServer) Stat(context.Context, *StatRequest) (*StatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedOpCorporaServiceServer) mustEmbedUnimplementedOpCorporaServiceServer() {}

// UnsafeOpCorporaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpCorporaServiceServer will
// result in compilation errors.
type UnsafeOpCorporaServiceServer interface {
	mustEmbedUnimplementedOpCorporaServiceServer()
}

func RegisterOpCorporaServiceServer(s grpc.ServiceRegistrar, srv OpCorporaServiceServer) {
	s.RegisterService(&OpCorporaService_ServiceDesc, srv)
}

func _OpCorporaService_Mode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpCorporaServiceServer).Mode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opcorpora_service.OpCorporaService/Mode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpCorporaServiceServer).Mode(ctx, req.(*ModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpCorporaService_FindWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpCorporaServiceServer).FindWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opcorpora_service.OpCorporaService/FindWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpCorporaServiceServer).FindWord(ctx, req.(*FindWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpCorporaService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpCorporaServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opcorpora_service.OpCorporaService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpCorporaServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpCorporaService_CheckFind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpCorporaServiceServer).CheckFind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opcorpora_service.OpCorporaService/CheckFind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpCorporaServiceServer).CheckFind(ctx, req.(*CheckFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpCorporaService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpCorporaServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opcorpora_service.OpCorporaService/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpCorporaServiceServer).Stat(ctx, req.(*StatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpCorporaService_ServiceDesc is the grpc.ServiceDesc for OpCorporaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpCorporaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opcorpora_service.OpCorporaService",
	HandlerType: (*OpCorporaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mode",
			Handler:    _OpCorporaService_Mode_Handler,
		},
		{
			MethodName: "FindWord",
			Handler:    _OpCorporaService_FindWord_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _OpCorporaService_Check_Handler,
		},
		{
			MethodName: "CheckFind",
			Handler:    _OpCorporaService_CheckFind_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _OpCorporaService_Stat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opcorpora.proto",
}
